---
apiVersion: extensions/v1beta1
kind: PodSecurityPolicy
metadata:
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: docker/default
    seccomp.security.alpha.kubernetes.io/defaultProfileName: docker/default
  name: nethealth
  namespace: nethealth
spec:
  privileged: false
  allowPrivilegeEscalation: false
  allowedCapabilities:
  - NET_RAW
  volumes:
  - configMap
  - emptyDir
  - projected
  - secret
  - downwardAPI
  - hostPath
  runAsUser:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  readOnlyRootFilesystem: true
  allowedHostPaths:
  - pathPrefix: "/run/nethealth"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nethealth
  namespace: monitoring
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: monitoring
  name: nethealth
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - watch
      - list
  - apiGroups:
      - policy
    resources:
      - podsecuritypolicies
    verbs:
      - use
    resourceNames:
      - nethealth
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nethealth
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - list
      - watch
      - get
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: monitoring
  name: nethealth
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nethealth
subjects:
- kind: ServiceAccount
  name: nethealth
  namespace: monitoring
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nethealth
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nethealth
subjects:
- kind: ServiceAccount
  name: nethealth
  namespace: monitoring
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nethealth
  namespace: monitoring
  labels:
    app: nethealth
spec:
  selector:
    matchLabels:
      k8s-app: nethealth
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        k8s-app: nethealth
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: docker/default
    spec:
      terminationGracePeriodSeconds: 5
      serviceAccountName: nethealth
      tolerations:
        # Tolerate all taints
        - effect: NoSchedule
          operator: Exists
        - effect: NoExecute
          operator: Exists
      containers:
        - name: nethealth
          image: quay.io/gravitational/nethealth-dev:7.1.6
          command:
            - /nethealth
          args:
            - run
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 0
            capabilities:
              drop:
              - all
              add:
              - NET_RAW
          imagePullPolicy: Always
          volumeMounts:
            - mountPath: /tmp
              name: tmpfs
            - mountPath: /run/nethealth
              name: run
          ports:
          - name: metrics
            containerPort: 9801
            protocol: TCP
      volumes:
        - name: tmpfs
          emptyDir:
            medium: Memory
        - name: run
          hostPath:
              path: /run/nethealth
              type: DirectoryOrCreate
---
apiVersion: v1
kind: Service
metadata:
  name: nethealth
  namespace: monitoring
  labels:
    k8s-app: nethealth
spec:
  selector:
    k8s-app: nethealth
  ports:
  - name: metrics
    protocol: TCP
    port: 9801
    targetPort: metrics
