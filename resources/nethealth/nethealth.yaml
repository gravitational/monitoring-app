---
apiVersion: extensions/v1beta1
kind: PodSecurityPolicy
metadata:
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: docker/default
    seccomp.security.alpha.kubernetes.io/defaultProfileName: docker/default
  name: nethealth
  namespace: nethealth
spec:
  privileged: false
  allowPrivilegeEscalation: false
  allowedCapabilities:
  - NET_RAW
  volumes:
  - 'configMap'
  - 'emptyDir'
  - 'projected'
  - 'secret'
  - 'downwardAPI'
  runAsUser:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  readOnlyRootFilesystem: true
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nethealth
  namespace: monitoring
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: monitoring
  name: nethealth
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - watch
      - list
  - apiGroups:
      - policy
    resources:
      - podsecuritypolicies
    verbs:
      - use
    resourceNames:
      - nethealth
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nethealth
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - list
      - watch
      - get
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: monitoring
  name: nethealth
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nethealth
subjects:
- kind: ServiceAccount
  name: nethealth
  namespace: monitoring
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nethealth
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nethealth
subjects:
- kind: ServiceAccount
  name: nethealth
  namespace: monitoring
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nethealth
  namespace: monitoring
  labels:
    app: nethealth
spec:
  selector:
    matchLabels:
      k8s-app: nethealth
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        k8s-app: nethealth
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: docker/default
    spec:
      terminationGracePeriodSeconds: 5
      serviceAccountName: nethealth
      tolerations:
        # Tolerate all taints
        - effect: NoSchedule
          operator: Exists
        - effect: NoExecute
          operator: Exists
      containers:
        - name: nethealth
          image: quay.io/gravitational/nethealth-dev:6.3.2
          command:
            - /nethealth
          args:
            - run
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 0
            capabilities:
              drop:
              - all
              add:
              - NET_RAW
          imagePullPolicy: Always
          volumeMounts:
            - mountPath: /tmp
              name: tmpfs
          ports:
          - name: metrics
            containerPort: 9801
            protocol: TCP
      volumes:
        - name: tmpfs
          emptyDir:
            medium: Memory
---
apiVersion: v1
kind: Service
metadata:
  name: nethealth
  namespace: monitoring
  labels:
    k8s-app: nethealth
spec:
  selector:
    k8s-app: nethealth
  ports:
  - name: metrics
    protocol: TCP
    port: 9801
    targetPort: metrics
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  annotations:
  labels:
    k8s-app: nethealth
  name: nethealth
  namespace: monitoring
spec:
  endpoints:
  - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
    interval: 15s
    port: metrics
  namespaceSelector:
    matchNames:
    - monitoring
  selector:
    matchLabels:
      k8s-app: nethealth
---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  annotations:
  labels:
    prometheus: k8s
    role: alert-rules
  name: prometheus-nethealth-rules
  namespace: monitoring
spec:
  groups:
  - name: nethealth.rules
    rules:
    - alert: OverlayPacketLoss
      expr: min(sum(increase (nethealth_echo_timeout_total[1m])) by (node_name,peer_name) / on (node_name,peer_name) sum(increase (nethealth_echo_request_total[1m])) by (node_name,peer_name)) by (peer_name) * 100 > 0
      for: 5m
      labels:
        severity: warning
      annotations:
        message: '{{ $labels.peer_name }} has {{ printf "%0.0f" $value }}% packet loss on the overlay network.'
    - alert: OverlayLatency
      expr: min(histogram_quantile(0.5, sum(rate(nethealth_echo_duration_seconds_bucket[1m])) by (node_name,peer_name,le))) by (peer_name) * 1000 > 15
      for: 5m
      labels:
        severity: warning
      annotations:
        message: '{{ $labels.peer_name }} has {{ printf "%0.0f" $value }}ms network latency on the overlay network.'
