---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: monitoring
    component: telegraf
  name: telegraf
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: monitoring
      component: telegraf
  template:
    metadata:
      labels:
        app: monitoring
        component: telegraf
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: docker/default
    spec:
      serviceAccountName: monitoring
      tolerations:
      - key: "gravitational.io/runlevel"
        value: system
        operator: Equal
        # allows to run on master nodes
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"
      securityContext:
        runAsUser: -1
      containers:
        - name: telegraf
          image: monitoring-telegraf:latest
          resources:
            limits:
              memory: "100Mi"
              cpu: "100m"
            requests:
              memory: "50Mi"
              cpu: "50m"
          volumeMounts:
            - name: config
              mountPath: /etc/telegraf
      volumes:
        - name: config
          configMap:
            name: telegraf-deployment
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: telegraf-node
  namespace: monitoring
  labels:
    app: monitoring
    component: telegraf
spec:
  selector:
    matchLabels:
      app: monitoring
      component: telegraf
  template:
    metadata:
      labels:
        app: monitoring
        component: telegraf
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: docker/default
    spec:
      hostNetwork: true
      serviceAccountName: monitoring
      tolerations:
        # allows to run on master nodes
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"
      securityContext:
        runAsUser: -1
      containers:
        - name: telegraf
          image: monitoring-telegraf:latest
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: "HOST_PROC"
              value: "/rootfs/proc"
            - name: "HOST_SYS"
              value: "/rootfs/sys"
          resources:
            limits:
              memory: "500Mi"
              cpu: "500m"
            requests:
              memory: "100Mi"
              cpu: "100m"
          volumeMounts:
            - name: sys
              mountPath: /rootfs/sys
              readOnly: true
            - name: docker
              mountPath: /var/run/docker.sock
              readOnly: true
            - name: proc
              mountPath: /rootfs/proc
              readOnly: true
            - name: docker-socket
              mountPath: /var/run/docker.sock
            - name: utmp
              mountPath: /var/run/utmp
              readOnly: true
            - name: certificates
              mountPath: /var/lib/gravity/secrets
            - name: config
              mountPath: /etc/telegraf
      volumes:
        - name: sys
          hostPath:
            path: /sys
        - name: docker-socket
          hostPath:
            path: /var/run/docker.sock
        - name: proc
          hostPath:
            path: /proc
        - name: utmp
          hostPath:
            path: /var/run/utmp
        - name: certificates
          hostPath:
            path: /var/lib/gravity/secrets
        - name: config
          configMap:
            name: telegraf-node
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: telegraf-node
  namespace: monitoring
  labels:
    app: monitoring
    component: telegraf
data:
  telegraf.conf: |+
    [global_tags]
    [agent]
      interval = "20s"
      round_interval = true
      metric_batch_size = 1000
      metric_buffer_limit = 10000
      collection_jitter = "0s"
      flush_interval = "10s"
      flush_jitter = "0s"
      precision = ""
      debug = false
      quiet = true
      hostname = ""
      omit_hostname = false

    [[outputs.influxdb]]
      urls = ["http://influxdb.monitoring.svc.cluster.local:8086"] # required
      database = "k8s" # required
      retention_policy = ""
      timeout = "5s"
      username = "root"
      password = "root"

    [[inputs.cpu]]
      percpu = true
      totalcpu = true
      collect_cpu_time = false
      report_active = false
    [[inputs.disk]]
      ignore_fs = ["tmpfs", "devtmpfs", "devfs"]
    [[inputs.diskio]]
    [[inputs.kernel]]
    [[inputs.mem]]
    [[inputs.processes]]
    [[inputs.swap]]
    [[inputs.system]]
    [[inputs.docker]]
      endpoint = "unix:///var/run/docker.sock"

    [[inputs.prometheus]]
      urls = ["http://$NODE_NAME:7580/metrics"]
      [inputs.prometheus.tags]
        nodename = "$NODE_NAME"

    [[inputs.prometheus]]
      urls = ["https://$NODE_NAME:2379/metrics"]
      namepass = ["etcd_rafthttp_message_*"]
      ssl_ca = '/var/lib/gravity/secrets/root.cert'
      ssl_cert = '/var/lib/gravity/secrets/etcd.cert'
      ssl_key = '/var/lib/gravity/secrets/etcd.key'
      [inputs.prometheus.tags]
        nodename = "$NODE_NAME"

    [[inputs.kubernetes]]
      url = "https://$NODE_NAME:10250"
      bearer_token = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      #  response_timeout = "5s"
      tls_ca = "/var/lib/gravity/secrets/root.cert"
      insecure_skip_verify = true
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: telegraf-deployment
  namespace: monitoring
  labels:
    app: monitoring
    component: telegraf
data:
  telegraf.conf: |+
    [global_tags]
    [agent]
      interval = "20s"
      round_interval = true
      metric_batch_size = 1000
      metric_buffer_limit = 10000
      collection_jitter = "0s"
      flush_interval = "10s"
      flush_jitter = "0s"
      precision = ""
      debug = false
      quiet = true
      hostname = ""
      omit_hostname = false

    [[outputs.influxdb]]
      urls = ["http://influxdb.monitoring.svc.cluster.local:8086"] # required
      database = "k8s" # required
      retention_policy = ""
      timeout = "5s"
      username = "root"
      password = "root"

    [[inputs.prometheus]]
      name_prefix = "k8s_"
      urls = ["https://kubernetes.default.svc.cluster.local/metrics"]
      ssl_ca = '/var/run/secrets/kubernetes.io/serviceaccount/ca.crt'
      bearer_token = '/var/run/secrets/kubernetes.io/serviceaccount/token'

    [[inputs.prometheus]]
      urls = ["http://kube-state-metrics.monitoring.svc.cluster.local:8080/metrics"]
